/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as RedirectImport } from './routes/redirect'
import { Route as PathlessLayoutImport } from './routes/_pathlessLayout'
import { Route as ExampleImport } from './routes/_example'
import { Route as AuthedImport } from './routes/_authed'
import { Route as IndexImport } from './routes/index'
import { Route as SignUpSplatImport } from './routes/sign-up.$'
import { Route as SignInSplatImport } from './routes/sign-in.$'
import { Route as PathlessLayoutNestedLayoutImport } from './routes/_pathlessLayout/_nested-layout'
import { Route as ExampleDeferredImport } from './routes/_example/deferred'
import { Route as AuthedNezhaImport } from './routes/_authed/nezha'
import { Route as ExampleUsersRouteImport } from './routes/_example/users.route'
import { Route as ExamplePostsRouteImport } from './routes/_example/posts.route'
import { Route as ExampleUsersIndexImport } from './routes/_example/users.index'
import { Route as ExamplePostsIndexImport } from './routes/_example/posts.index'
import { Route as PathlessLayoutNestedLayoutRouteBImport } from './routes/_pathlessLayout/_nested-layout/route-b'
import { Route as PathlessLayoutNestedLayoutRouteAImport } from './routes/_pathlessLayout/_nested-layout/route-a'
import { Route as ExampleUsersUserIdImport } from './routes/_example/users.$userId'
import { Route as ExamplePostsPostIdImport } from './routes/_example/posts.$postId'
import { Route as ExamplePostsPostIdDeepImport } from './routes/_example/posts_.$postId.deep'

// Create/Update Routes

const RedirectRoute = RedirectImport.update({
  id: '/redirect',
  path: '/redirect',
  getParentRoute: () => rootRoute,
} as any)

const PathlessLayoutRoute = PathlessLayoutImport.update({
  id: '/_pathlessLayout',
  getParentRoute: () => rootRoute,
} as any)

const ExampleRoute = ExampleImport.update({
  id: '/_example',
  getParentRoute: () => rootRoute,
} as any)

const AuthedRoute = AuthedImport.update({
  id: '/_authed',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const SignUpSplatRoute = SignUpSplatImport.update({
  id: '/sign-up/$',
  path: '/sign-up/$',
  getParentRoute: () => rootRoute,
} as any)

const SignInSplatRoute = SignInSplatImport.update({
  id: '/sign-in/$',
  path: '/sign-in/$',
  getParentRoute: () => rootRoute,
} as any)

const PathlessLayoutNestedLayoutRoute = PathlessLayoutNestedLayoutImport.update(
  {
    id: '/_nested-layout',
    getParentRoute: () => PathlessLayoutRoute,
  } as any,
)

const ExampleDeferredRoute = ExampleDeferredImport.update({
  id: '/deferred',
  path: '/deferred',
  getParentRoute: () => ExampleRoute,
} as any)

const AuthedNezhaRoute = AuthedNezhaImport.update({
  id: '/nezha',
  path: '/nezha',
  getParentRoute: () => AuthedRoute,
} as any)

const ExampleUsersRouteRoute = ExampleUsersRouteImport.update({
  id: '/users',
  path: '/users',
  getParentRoute: () => ExampleRoute,
} as any)

const ExamplePostsRouteRoute = ExamplePostsRouteImport.update({
  id: '/posts',
  path: '/posts',
  getParentRoute: () => ExampleRoute,
} as any)

const ExampleUsersIndexRoute = ExampleUsersIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ExampleUsersRouteRoute,
} as any)

const ExamplePostsIndexRoute = ExamplePostsIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ExamplePostsRouteRoute,
} as any)

const PathlessLayoutNestedLayoutRouteBRoute =
  PathlessLayoutNestedLayoutRouteBImport.update({
    id: '/route-b',
    path: '/route-b',
    getParentRoute: () => PathlessLayoutNestedLayoutRoute,
  } as any)

const PathlessLayoutNestedLayoutRouteARoute =
  PathlessLayoutNestedLayoutRouteAImport.update({
    id: '/route-a',
    path: '/route-a',
    getParentRoute: () => PathlessLayoutNestedLayoutRoute,
  } as any)

const ExampleUsersUserIdRoute = ExampleUsersUserIdImport.update({
  id: '/$userId',
  path: '/$userId',
  getParentRoute: () => ExampleUsersRouteRoute,
} as any)

const ExamplePostsPostIdRoute = ExamplePostsPostIdImport.update({
  id: '/$postId',
  path: '/$postId',
  getParentRoute: () => ExamplePostsRouteRoute,
} as any)

const ExamplePostsPostIdDeepRoute = ExamplePostsPostIdDeepImport.update({
  id: '/posts_/$postId/deep',
  path: '/posts/$postId/deep',
  getParentRoute: () => ExampleRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_authed': {
      id: '/_authed'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthedImport
      parentRoute: typeof rootRoute
    }
    '/_example': {
      id: '/_example'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ExampleImport
      parentRoute: typeof rootRoute
    }
    '/_pathlessLayout': {
      id: '/_pathlessLayout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PathlessLayoutImport
      parentRoute: typeof rootRoute
    }
    '/redirect': {
      id: '/redirect'
      path: '/redirect'
      fullPath: '/redirect'
      preLoaderRoute: typeof RedirectImport
      parentRoute: typeof rootRoute
    }
    '/_example/posts': {
      id: '/_example/posts'
      path: '/posts'
      fullPath: '/posts'
      preLoaderRoute: typeof ExamplePostsRouteImport
      parentRoute: typeof ExampleImport
    }
    '/_example/users': {
      id: '/_example/users'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof ExampleUsersRouteImport
      parentRoute: typeof ExampleImport
    }
    '/_authed/nezha': {
      id: '/_authed/nezha'
      path: '/nezha'
      fullPath: '/nezha'
      preLoaderRoute: typeof AuthedNezhaImport
      parentRoute: typeof AuthedImport
    }
    '/_example/deferred': {
      id: '/_example/deferred'
      path: '/deferred'
      fullPath: '/deferred'
      preLoaderRoute: typeof ExampleDeferredImport
      parentRoute: typeof ExampleImport
    }
    '/_pathlessLayout/_nested-layout': {
      id: '/_pathlessLayout/_nested-layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PathlessLayoutNestedLayoutImport
      parentRoute: typeof PathlessLayoutImport
    }
    '/sign-in/$': {
      id: '/sign-in/$'
      path: '/sign-in/$'
      fullPath: '/sign-in/$'
      preLoaderRoute: typeof SignInSplatImport
      parentRoute: typeof rootRoute
    }
    '/sign-up/$': {
      id: '/sign-up/$'
      path: '/sign-up/$'
      fullPath: '/sign-up/$'
      preLoaderRoute: typeof SignUpSplatImport
      parentRoute: typeof rootRoute
    }
    '/_example/posts/$postId': {
      id: '/_example/posts/$postId'
      path: '/$postId'
      fullPath: '/posts/$postId'
      preLoaderRoute: typeof ExamplePostsPostIdImport
      parentRoute: typeof ExamplePostsRouteImport
    }
    '/_example/users/$userId': {
      id: '/_example/users/$userId'
      path: '/$userId'
      fullPath: '/users/$userId'
      preLoaderRoute: typeof ExampleUsersUserIdImport
      parentRoute: typeof ExampleUsersRouteImport
    }
    '/_pathlessLayout/_nested-layout/route-a': {
      id: '/_pathlessLayout/_nested-layout/route-a'
      path: '/route-a'
      fullPath: '/route-a'
      preLoaderRoute: typeof PathlessLayoutNestedLayoutRouteAImport
      parentRoute: typeof PathlessLayoutNestedLayoutImport
    }
    '/_pathlessLayout/_nested-layout/route-b': {
      id: '/_pathlessLayout/_nested-layout/route-b'
      path: '/route-b'
      fullPath: '/route-b'
      preLoaderRoute: typeof PathlessLayoutNestedLayoutRouteBImport
      parentRoute: typeof PathlessLayoutNestedLayoutImport
    }
    '/_example/posts/': {
      id: '/_example/posts/'
      path: '/'
      fullPath: '/posts/'
      preLoaderRoute: typeof ExamplePostsIndexImport
      parentRoute: typeof ExamplePostsRouteImport
    }
    '/_example/users/': {
      id: '/_example/users/'
      path: '/'
      fullPath: '/users/'
      preLoaderRoute: typeof ExampleUsersIndexImport
      parentRoute: typeof ExampleUsersRouteImport
    }
    '/_example/posts_/$postId/deep': {
      id: '/_example/posts_/$postId/deep'
      path: '/posts/$postId/deep'
      fullPath: '/posts/$postId/deep'
      preLoaderRoute: typeof ExamplePostsPostIdDeepImport
      parentRoute: typeof ExampleImport
    }
  }
}

// Create and export the route tree

interface AuthedRouteChildren {
  AuthedNezhaRoute: typeof AuthedNezhaRoute
}

const AuthedRouteChildren: AuthedRouteChildren = {
  AuthedNezhaRoute: AuthedNezhaRoute,
}

const AuthedRouteWithChildren =
  AuthedRoute._addFileChildren(AuthedRouteChildren)

interface ExamplePostsRouteRouteChildren {
  ExamplePostsPostIdRoute: typeof ExamplePostsPostIdRoute
  ExamplePostsIndexRoute: typeof ExamplePostsIndexRoute
}

const ExamplePostsRouteRouteChildren: ExamplePostsRouteRouteChildren = {
  ExamplePostsPostIdRoute: ExamplePostsPostIdRoute,
  ExamplePostsIndexRoute: ExamplePostsIndexRoute,
}

const ExamplePostsRouteRouteWithChildren =
  ExamplePostsRouteRoute._addFileChildren(ExamplePostsRouteRouteChildren)

interface ExampleUsersRouteRouteChildren {
  ExampleUsersUserIdRoute: typeof ExampleUsersUserIdRoute
  ExampleUsersIndexRoute: typeof ExampleUsersIndexRoute
}

const ExampleUsersRouteRouteChildren: ExampleUsersRouteRouteChildren = {
  ExampleUsersUserIdRoute: ExampleUsersUserIdRoute,
  ExampleUsersIndexRoute: ExampleUsersIndexRoute,
}

const ExampleUsersRouteRouteWithChildren =
  ExampleUsersRouteRoute._addFileChildren(ExampleUsersRouteRouteChildren)

interface ExampleRouteChildren {
  ExamplePostsRouteRoute: typeof ExamplePostsRouteRouteWithChildren
  ExampleUsersRouteRoute: typeof ExampleUsersRouteRouteWithChildren
  ExampleDeferredRoute: typeof ExampleDeferredRoute
  ExamplePostsPostIdDeepRoute: typeof ExamplePostsPostIdDeepRoute
}

const ExampleRouteChildren: ExampleRouteChildren = {
  ExamplePostsRouteRoute: ExamplePostsRouteRouteWithChildren,
  ExampleUsersRouteRoute: ExampleUsersRouteRouteWithChildren,
  ExampleDeferredRoute: ExampleDeferredRoute,
  ExamplePostsPostIdDeepRoute: ExamplePostsPostIdDeepRoute,
}

const ExampleRouteWithChildren =
  ExampleRoute._addFileChildren(ExampleRouteChildren)

interface PathlessLayoutNestedLayoutRouteChildren {
  PathlessLayoutNestedLayoutRouteARoute: typeof PathlessLayoutNestedLayoutRouteARoute
  PathlessLayoutNestedLayoutRouteBRoute: typeof PathlessLayoutNestedLayoutRouteBRoute
}

const PathlessLayoutNestedLayoutRouteChildren: PathlessLayoutNestedLayoutRouteChildren =
  {
    PathlessLayoutNestedLayoutRouteARoute:
      PathlessLayoutNestedLayoutRouteARoute,
    PathlessLayoutNestedLayoutRouteBRoute:
      PathlessLayoutNestedLayoutRouteBRoute,
  }

const PathlessLayoutNestedLayoutRouteWithChildren =
  PathlessLayoutNestedLayoutRoute._addFileChildren(
    PathlessLayoutNestedLayoutRouteChildren,
  )

interface PathlessLayoutRouteChildren {
  PathlessLayoutNestedLayoutRoute: typeof PathlessLayoutNestedLayoutRouteWithChildren
}

const PathlessLayoutRouteChildren: PathlessLayoutRouteChildren = {
  PathlessLayoutNestedLayoutRoute: PathlessLayoutNestedLayoutRouteWithChildren,
}

const PathlessLayoutRouteWithChildren = PathlessLayoutRoute._addFileChildren(
  PathlessLayoutRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof PathlessLayoutNestedLayoutRouteWithChildren
  '/redirect': typeof RedirectRoute
  '/posts': typeof ExamplePostsRouteRouteWithChildren
  '/users': typeof ExampleUsersRouteRouteWithChildren
  '/nezha': typeof AuthedNezhaRoute
  '/deferred': typeof ExampleDeferredRoute
  '/sign-in/$': typeof SignInSplatRoute
  '/sign-up/$': typeof SignUpSplatRoute
  '/posts/$postId': typeof ExamplePostsPostIdRoute
  '/users/$userId': typeof ExampleUsersUserIdRoute
  '/route-a': typeof PathlessLayoutNestedLayoutRouteARoute
  '/route-b': typeof PathlessLayoutNestedLayoutRouteBRoute
  '/posts/': typeof ExamplePostsIndexRoute
  '/users/': typeof ExampleUsersIndexRoute
  '/posts/$postId/deep': typeof ExamplePostsPostIdDeepRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof PathlessLayoutNestedLayoutRouteWithChildren
  '/redirect': typeof RedirectRoute
  '/nezha': typeof AuthedNezhaRoute
  '/deferred': typeof ExampleDeferredRoute
  '/sign-in/$': typeof SignInSplatRoute
  '/sign-up/$': typeof SignUpSplatRoute
  '/posts/$postId': typeof ExamplePostsPostIdRoute
  '/users/$userId': typeof ExampleUsersUserIdRoute
  '/route-a': typeof PathlessLayoutNestedLayoutRouteARoute
  '/route-b': typeof PathlessLayoutNestedLayoutRouteBRoute
  '/posts': typeof ExamplePostsIndexRoute
  '/users': typeof ExampleUsersIndexRoute
  '/posts/$postId/deep': typeof ExamplePostsPostIdDeepRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_authed': typeof AuthedRouteWithChildren
  '/_example': typeof ExampleRouteWithChildren
  '/_pathlessLayout': typeof PathlessLayoutRouteWithChildren
  '/redirect': typeof RedirectRoute
  '/_example/posts': typeof ExamplePostsRouteRouteWithChildren
  '/_example/users': typeof ExampleUsersRouteRouteWithChildren
  '/_authed/nezha': typeof AuthedNezhaRoute
  '/_example/deferred': typeof ExampleDeferredRoute
  '/_pathlessLayout/_nested-layout': typeof PathlessLayoutNestedLayoutRouteWithChildren
  '/sign-in/$': typeof SignInSplatRoute
  '/sign-up/$': typeof SignUpSplatRoute
  '/_example/posts/$postId': typeof ExamplePostsPostIdRoute
  '/_example/users/$userId': typeof ExampleUsersUserIdRoute
  '/_pathlessLayout/_nested-layout/route-a': typeof PathlessLayoutNestedLayoutRouteARoute
  '/_pathlessLayout/_nested-layout/route-b': typeof PathlessLayoutNestedLayoutRouteBRoute
  '/_example/posts/': typeof ExamplePostsIndexRoute
  '/_example/users/': typeof ExampleUsersIndexRoute
  '/_example/posts_/$postId/deep': typeof ExamplePostsPostIdDeepRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/redirect'
    | '/posts'
    | '/users'
    | '/nezha'
    | '/deferred'
    | '/sign-in/$'
    | '/sign-up/$'
    | '/posts/$postId'
    | '/users/$userId'
    | '/route-a'
    | '/route-b'
    | '/posts/'
    | '/users/'
    | '/posts/$postId/deep'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/redirect'
    | '/nezha'
    | '/deferred'
    | '/sign-in/$'
    | '/sign-up/$'
    | '/posts/$postId'
    | '/users/$userId'
    | '/route-a'
    | '/route-b'
    | '/posts'
    | '/users'
    | '/posts/$postId/deep'
  id:
    | '__root__'
    | '/'
    | '/_authed'
    | '/_example'
    | '/_pathlessLayout'
    | '/redirect'
    | '/_example/posts'
    | '/_example/users'
    | '/_authed/nezha'
    | '/_example/deferred'
    | '/_pathlessLayout/_nested-layout'
    | '/sign-in/$'
    | '/sign-up/$'
    | '/_example/posts/$postId'
    | '/_example/users/$userId'
    | '/_pathlessLayout/_nested-layout/route-a'
    | '/_pathlessLayout/_nested-layout/route-b'
    | '/_example/posts/'
    | '/_example/users/'
    | '/_example/posts_/$postId/deep'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthedRoute: typeof AuthedRouteWithChildren
  ExampleRoute: typeof ExampleRouteWithChildren
  PathlessLayoutRoute: typeof PathlessLayoutRouteWithChildren
  RedirectRoute: typeof RedirectRoute
  SignInSplatRoute: typeof SignInSplatRoute
  SignUpSplatRoute: typeof SignUpSplatRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthedRoute: AuthedRouteWithChildren,
  ExampleRoute: ExampleRouteWithChildren,
  PathlessLayoutRoute: PathlessLayoutRouteWithChildren,
  RedirectRoute: RedirectRoute,
  SignInSplatRoute: SignInSplatRoute,
  SignUpSplatRoute: SignUpSplatRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_authed",
        "/_example",
        "/_pathlessLayout",
        "/redirect",
        "/sign-in/$",
        "/sign-up/$"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_authed": {
      "filePath": "_authed.tsx",
      "children": [
        "/_authed/nezha"
      ]
    },
    "/_example": {
      "filePath": "_example.tsx",
      "children": [
        "/_example/posts",
        "/_example/users",
        "/_example/deferred",
        "/_example/posts_/$postId/deep"
      ]
    },
    "/_pathlessLayout": {
      "filePath": "_pathlessLayout.tsx",
      "children": [
        "/_pathlessLayout/_nested-layout"
      ]
    },
    "/redirect": {
      "filePath": "redirect.tsx"
    },
    "/_example/posts": {
      "filePath": "_example/posts.route.tsx",
      "parent": "/_example",
      "children": [
        "/_example/posts/$postId",
        "/_example/posts/"
      ]
    },
    "/_example/users": {
      "filePath": "_example/users.route.tsx",
      "parent": "/_example",
      "children": [
        "/_example/users/$userId",
        "/_example/users/"
      ]
    },
    "/_authed/nezha": {
      "filePath": "_authed/nezha.tsx",
      "parent": "/_authed"
    },
    "/_example/deferred": {
      "filePath": "_example/deferred.tsx",
      "parent": "/_example"
    },
    "/_pathlessLayout/_nested-layout": {
      "filePath": "_pathlessLayout/_nested-layout.tsx",
      "parent": "/_pathlessLayout",
      "children": [
        "/_pathlessLayout/_nested-layout/route-a",
        "/_pathlessLayout/_nested-layout/route-b"
      ]
    },
    "/sign-in/$": {
      "filePath": "sign-in.$.tsx"
    },
    "/sign-up/$": {
      "filePath": "sign-up.$.tsx"
    },
    "/_example/posts/$postId": {
      "filePath": "_example/posts.$postId.tsx",
      "parent": "/_example/posts"
    },
    "/_example/users/$userId": {
      "filePath": "_example/users.$userId.tsx",
      "parent": "/_example/users"
    },
    "/_pathlessLayout/_nested-layout/route-a": {
      "filePath": "_pathlessLayout/_nested-layout/route-a.tsx",
      "parent": "/_pathlessLayout/_nested-layout"
    },
    "/_pathlessLayout/_nested-layout/route-b": {
      "filePath": "_pathlessLayout/_nested-layout/route-b.tsx",
      "parent": "/_pathlessLayout/_nested-layout"
    },
    "/_example/posts/": {
      "filePath": "_example/posts.index.tsx",
      "parent": "/_example/posts"
    },
    "/_example/users/": {
      "filePath": "_example/users.index.tsx",
      "parent": "/_example/users"
    },
    "/_example/posts_/$postId/deep": {
      "filePath": "_example/posts_.$postId.deep.tsx",
      "parent": "/_example"
    }
  }
}
ROUTE_MANIFEST_END */
